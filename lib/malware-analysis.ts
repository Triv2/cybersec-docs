export const malwareAnalysisContent = {
  theory: `
  <h2>Introduction to Malware Analysis</h2>
  <p>
    Malware analysis is the process of studying malicious software to understand its functionality, origin, impact, and methods of delivery. This analysis helps security professionals develop effective detection mechanisms, mitigation strategies, and incident response procedures.
  </p>

  <div class="info-box">
    <strong>Definition:</strong> Malware analysis is the study of the functionality, behavior, and purpose of malicious code through behavioral analysis, code analysis, and reverse engineering techniques.
  </div>

  <h3>Core Principles of Malware Analysis</h3>
  <p>Effective malware analysis is guided by several key principles:</p>
  <ul>
    <li><strong>Safety First:</strong> Conducting analysis in isolated environments to prevent accidental infection</li>
    <li><strong>Multiple Approaches:</strong> Using both static and dynamic analysis techniques</li>
    <li><strong>Thoroughness:</strong> Examining all aspects of the malware's behavior and code</li>
    <li><strong>Documentation:</strong> Maintaining detailed records of findings and methodologies</li>
    <li><strong>Continuous Learning:</strong> Staying updated on new malware techniques and analysis methods</li>
  </ul>

  <h3>Types of Malware</h3>
  <p>Understanding different types of malware is essential for effective analysis:</p>
  
  <h4>Viruses</h4>
  <p>Self-replicating malicious code that attaches itself to legitimate programs:</p>
  <ul>
    <li>Requires user action to spread</li>
    <li>Modifies or infects other files</li>
    <li>Often damages or corrupts data</li>
    <li>Examples: File infectors, boot sector viruses, macro viruses</li>
  </ul>

  <h4>Worms</h4>
  <p>Self-replicating malware that spreads independently:</p>
  <ul>
    <li>Exploits network vulnerabilities to propagate</li>
    <li>Does not require user interaction</li>
    <li>Often causes network congestion</li>
    <li>Examples: Email worms, network worms, IM worms</li>
  </ul>

  <h4>Trojans</h4>
  <p>Malware disguised as legitimate software:</p>
  <ul>
    <li>Does not self-replicate</li>
    <li>Performs covert malicious actions</li>
    <li>Often provides backdoor access</li>
    <li>Examples: Remote access trojans (RATs), banking trojans, downloader trojans</li>
  </ul>

  <h4>Ransomware</h4>
  <p>Malware that encrypts data and demands payment for decryption:</p>
  <ul>
    <li>Encrypts files or locks systems</li>
    <li>Demands ransom payment (often in cryptocurrency)</li>
    <li>May include data exfiltration capabilities</li>
    <li>Examples: Crypto ransomware, locker ransomware, doxware</li>
  </ul>

  <h4>Rootkits</h4>
  <p>Malware designed to gain privileged access while hiding its presence:</p>
  <ul>
    <li>Modifies operating system functionality</li>
    <li>Hides processes, files, and network connections</li>
    <li>Difficult to detect and remove</li>
    <li>Examples: User-mode rootkits, kernel-mode rootkits, bootkit rootkits</li>
  </ul>

  <h4>Botnets</h4>
  <p>Networks of compromised computers controlled by an attacker:</p>
  <ul>
    <li>Controlled via command and control (C2) servers</li>
    <li>Used for distributed attacks or cryptocurrency mining</li>
    <li>Often employs multiple infection vectors</li>
    <li>Examples: IRC botnets, HTTP botnets, P2P botnets</li>
  </ul>

  <h4>Fileless Malware</h4>
  <p>Malware that operates primarily in memory without writing files to disk:</p>
  <ul>
    <li>Leverages legitimate system tools</li>
    <li>Difficult to detect with traditional methods</li>
    <li>Often uses PowerShell, WMI, or registry for persistence</li>
    <li>Examples: Memory-only injectors, registry-resident malware</li>
  </ul>

  <h3>Malware Analysis Approaches</h3>
  
  <h4>Static Analysis</h4>
  <p>Examining malware without executing it:</p>
  <ul>
    <li><strong>Basic Static Analysis:</strong> File properties, hashes, strings, headers</li>
    <li><strong>Advanced Static Analysis:</strong> Disassembly, decompilation, code analysis</li>
    <li><strong>Advantages:</strong> Safe, reveals potential capabilities</li>
    <li><strong>Limitations:</strong> Obfuscation, encryption, and packing can hinder analysis</li>
  </ul>

  <h4>Dynamic Analysis</h4>
  <p>Observing malware behavior during execution:</p>
  <ul>
    <li><strong>Basic Dynamic Analysis:</strong> Process monitoring, file system changes, network activity</li>
    <li><strong>Advanced Dynamic Analysis:</strong> Debugging, API hooking, memory analysis</li>
    <li><strong>Advantages:</strong> Reveals actual behavior, bypasses obfuscation</li>
    <li><strong>Limitations:</strong> May miss conditional code paths, anti-analysis techniques</li>
  </ul>

  <h4>Hybrid Analysis</h4>
  <p>Combining static and dynamic approaches:</p>
  <ul>
    <li>Uses insights from each method to guide further analysis</li>
    <li>Provides more comprehensive understanding</li>
    <li>Helps overcome limitations of individual approaches</li>
  </ul>

  <h3>Malware Analysis Process</h3>
  <p>A structured approach to malware analysis typically includes these steps:</p>
  
  <h4>1. Preparation</h4>
  <p>Setting up the analysis environment:</p>
  <ul>
    <li>Establish isolated analysis environment (sandbox, virtual machine)</li>
    <li>Configure monitoring and analysis tools</li>
    <li>Create system snapshots for restoration</li>
    <li>Implement network isolation or simulation</li>
  </ul>

  <h4>2. Initial Assessment</h4>
  <p>Gathering basic information about the malware:</p>
  <ul>
    <li>Calculate file hashes (MD5, SHA-1, SHA-256)</li>
    <li>Check file type and format</li>
    <li>Scan with multiple antivirus engines</li>
    <li>Search for known indicators in threat intelligence platforms</li>
  </ul>

  <h4>3. Basic Static Analysis</h4>
  <p>Examining the malware without execution:</p>
  <ul>
    <li>Extract strings and analyze for clues</li>
    <li>Identify embedded resources</li>
    <li>Check for packing or obfuscation</li>
    <li>Examine headers and sections</li>
    <li>Identify imported and exported functions</li>
  </ul>

  <h4>4. Basic Dynamic Analysis</h4>
  <p>Observing malware behavior during controlled execution:</p>
  <ul>
    <li>Monitor process creation and termination</li>
    <li>Track file system activity</li>
    <li>Observe registry modifications</li>
    <li>Capture network traffic</li>
    <li>Identify persistence mechanisms</li>
  </ul>

  <h4>5. Advanced Static Analysis</h4>
  <p>Detailed examination of malware code:</p>
  <ul>
    <li>Disassemble executable code</li>
    <li>Identify key algorithms and functions</li>
    <li>Analyze control flow</li>
    <li>Decompile to higher-level language (when possible)</li>
    <li>Identify obfuscation techniques</li>
  </ul>

  <h4>6. Advanced Dynamic Analysis</h4>
  <p>In-depth analysis of malware execution:</p>
  <ul>
    <li>Debug the malware during execution</li>
    <li>Set breakpoints at key functions</li>
    <li>Analyze memory dumps</li>
    <li>Monitor API calls and parameters</li>
    <li>Trace code execution paths</li>
  </ul>

  <h4>7. Documentation and Reporting</h4>
  <p>Recording and communicating findings:</p>
  <ul>
    <li>Document indicators of compromise (IOCs)</li>
    <li>Describe malware functionality and behavior</li>
    <li>Identify potential attribution information</li>
    <li>Recommend detection and mitigation strategies</li>
    <li>Create comprehensive analysis report</li>
  </ul>

  <h3>Malware Analysis Tools</h3>
  
  <h4>Static Analysis Tools</h4>
  <ul>
    <li><strong>PE Explorer:</strong> Analyze PE file structure</li>
    <li><strong>IDA Pro/Ghidra:</strong> Disassembly and decompilation</li>
    <li><strong>PEiD:</strong> Detect packers and compilers</li>
    <li><strong>FLOSS:</strong> Extract obfuscated strings</li>
    <li><strong>Binwalk:</strong> Analyze firmware and identify embedded files</li>
  </ul>

  <h4>Dynamic Analysis Tools</h4>
  <ul>
    <li><strong>Process Monitor:</strong> Track file system and registry activity</li>
    <li><strong>Process Explorer:</strong> Examine running processes</li>
    <li><strong>Wireshark:</strong> Capture and analyze network traffic</li>
    <li><strong>Regshot:</strong> Compare registry snapshots</li>
    <li><strong>API Monitor:</strong> Track API calls</li>
  </ul>

  <h4>Debugging Tools</h4>
  <ul>
    <li><strong>OllyDbg:</strong> User-mode debugger</li>
    <li><strong>WinDbg:</strong> Windows debugger</li>
    <li><strong>x64dbg:</strong> Open-source Windows debugger</li>
    <li><strong>GDB:</strong> GNU debugger for Linux</li>
    <li><strong>Immunity Debugger:</strong> Python-scriptable debugger</li>
  </ul>

  <h4>Sandbox Solutions</h4>
  <ul>
    <li><strong>Cuckoo Sandbox:</strong> Open-source automated analysis</li>
    <li><strong>ANY.RUN:</strong> Interactive malware analysis</li>
    <li><strong>Joe Sandbox:</strong> Advanced malware analysis platform</li>
    <li><strong>VirusTotal:</strong> Multi-engine scanning and basic analysis</li>
    <li><strong>Hybrid Analysis:</strong> Free malware analysis service</li>
  </ul>

  <h4>Memory Analysis Tools</h4>
  <ul>
    <li><strong>Volatility:</strong> Memory forensics framework</li>
    <li><strong>Rekall:</strong> Memory analysis framework</li>
    <li><strong>Redline:</strong> Memory analysis tool by FireEye</li>
    <li><strong>MemProcFS:</strong> Memory process file system</li>
  </ul>

  <h3>Anti-Analysis Techniques</h3>
  <p>Malware often employs techniques to hinder analysis:</p>
  
  <h4>Obfuscation</h4>
  <p>Techniques to make code difficult to understand:</p>
  <ul>
    <li>Code obfuscation</li>
    <li>String encryption</li>
    <li>Control flow obfuscation</li>
    <li>Dead code insertion</li>
  </ul>

  <h4>Packing</h4>
  <p>Compressing or encrypting the original code:</p>
  <ul>
    <li>Custom packers</li>
    <li>Commercial packers (UPX, Themida)</li>
    <li>Multiple layers of packing</li>
    <li>Runtime unpacking</li>
  </ul>

  <h4>Anti-VM/Sandbox Techniques</h4>
  <p>Methods to detect analysis environments:</p>
  <ul>
    <li>VM artifact detection</li>
    <li>Sandbox-specific registry keys or files</li>
    <li>Hardware fingerprinting</li>
    <li>Timing checks</li>
  </ul>

  <h4>Anti-Debugging Techniques</h4>
  <p>Techniques to detect and evade debuggers:</p>
  <ul>
    <li>IsDebuggerPresent API</li>
    <li>Timing checks</li>
    <li>Exception handling tricks</li>
    <li>Debugger artifact detection</li>
  </ul>

  <h3>Malware Analysis Report</h3>
  <p>A comprehensive malware analysis report typically includes:</p>
  <ul>
    <li><strong>Executive Summary:</strong> Brief overview of findings and impact</li>
    <li><strong>Sample Information:</strong> File details, hashes, type</li>
    <li><strong>Analysis Environment:</strong> Tools and setup used</li>
    <li><strong>Static Analysis Findings:</strong> Code structure, strings, imports</li>
    <li><strong>Dynamic Analysis Findings:</strong> Runtime behavior, system changes</li>
    <li><strong>Network Analysis:</strong> Communication protocols, C2 servers</li>
    <li><strong>Functionality Assessment:</strong> Capabilities and purpose</li>
    <li><strong>Indicators of Compromise (IOCs):</strong> File hashes, network indicators, registry keys</li>
    <li><strong>Detection and Mitigation:</strong> Recommendations for protection</li>
    <li><strong>Attribution:</strong> Potential threat actors or campaigns (if identifiable)</li>
    <li><strong>Appendices:</strong> Detailed logs, code snippets, screenshots</li>
  </ul>

  <div class="tip-box">
    <strong>Best Practice:</strong> Always analyze malware in isolated environments disconnected from production networks. Use disposable virtual machines that can be reverted to a clean state after analysis.
  </div>
  `,
  examples: [
    {
      title: "Basic Static Analysis",
      description: "Example of basic static analysis techniques for examining a suspicious executable.",
      language: "bash",
      code: `# Calculate file hashes
sha256sum suspicious.exe
md5sum suspicious.exe

# Check file type
file suspicious.exe

# Extract strings from the binary
strings suspicious.exe | grep -E "http|www\\.|https|ftp:|cmd.exe|powershell|registry|HKEY_"

# Examine PE file structure
pecheck suspicious.exe

# List imported functions
objdump -x suspicious.exe | grep "DLL Name" -A 20

# Check for packers
upx -t suspicious.exe
pepack suspicious.exe

# Scan with multiple antivirus engines (using ClamAV as example)
clamscan suspicious.exe

# Extract embedded resources
resource_hacker -open suspicious.exe -save resources/ -action extract

# Check digital signature
sigcheck -v suspicious.exe

# Analyze PE headers
pedump --header suspicious.exe`,
    },
    {
      title: "Dynamic Malware Analysis",
      description: "Example of dynamic analysis techniques for observing malware behavior during execution.",
      language: "bash",
      code: `# Prepare analysis environment
# 1. Take VM snapshot
# 2. Disable network or configure INetSim
# 3. Start monitoring tools

# Start Process Monitor
procmon /backingfile c:\\analysis\\procmon.pml

# Start network capture
windump -i 1 -w c:\\analysis\\network.pcap

# Start API monitoring
apimonitor -f c:\\analysis\\api_log.xml

# Execute the malware (example using sandbox)
cuckoo submit --timeout 300 suspicious.exe

# Capture memory dump after execution
winpmem -o c:\\analysis\\memory.raw

# Analyze memory dump with Volatility
volatility -f c:\\analysis\\memory.raw --profile=Win10x64_19041 pslist
volatility -f c:\\analysis\\memory.raw --profile=Win10x64_19041 netscan
volatility -f c:\\analysis\\memory.raw --profile=Win10x64_19041 malfind

# Extract network indicators
tshark -r c:\\analysis\\network.pcap -Y "dns" -T fields -e dns.qry.name
tshark -r c:\\analysis\\network.pcap -Y "http" -T fields -e http.host -e http.request.uri

# Check for persistence mechanisms
reg query "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"
reg query "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"
schtasks /query /fo LIST /v

# Identify created files
dir /s /b /a C:\\Users\\%USERNAME%\\AppData\\Local\\Temp\\*.*
dir /s /b /a C:\\ProgramData\\*.*

# Restore VM to clean snapshot after analysis`,
    },
    {
      title: "Malware Analysis Report",
      description: "Template for a comprehensive malware analysis report.",
      language: "markdown",
      code: `# Malware Analysis Report

## 1. Executive Summary

**Sample Name**: Trojan.Emotet.ABC123
**Analysis Date**: 2023-06-15
**Severity**: High
**Family**: Emotet Banking Trojan
**Key Findings**: 
- Banking credential theft capability
- Self-propagation via email
- Command and control communication
- System persistence via registry and scheduled tasks
- Anti-analysis techniques detected

## 2. Sample Information

**File Name**: invoice_06152023.exe
**File Size**: 245,760 bytes
**File Type**: PE32 executable for MS Windows
**MD5**: 3a45b7e11e5a9e115f8ab5482f9cd9a1
**SHA-1**: 7b4e8fca54d3de09c24954e9a9adc6b9c7f2784a
**SHA-256**: 8a9f52654f154de3bc5b5b6e9f5b53281634e42f32915b19179a4b3b9c967b3a
**Compilation Timestamp**: 2023-05-30 14:23:45 UTC
**Packer Identified**: UPX (unpacked for analysis)

## 3. Analysis Environment

**Operating System**: Windows 10 Pro 21H2 (10.0.19044)
**Analysis Tools**:
- Static Analysis: PEStudio, IDA Pro, FLOSS, PEiD
- Dynamic Analysis: Process Monitor, Wireshark, RegShot
- Memory Analysis: Volatility Framework
- Sandbox: Cuckoo Sandbox v2.0.7

## 4. Static Analysis Findings

### 4.1 File Properties
- No digital signature
- Subsystem: Windows GUI
- Entry Point: 0x004A5B2C

### 4.2 Imports
- kernel32.dll: CreateProcessA, VirtualAlloc, WriteProcessMemory
- user32.dll: FindWindowA, SetWindowsHookExA
- ws2_32.dll: socket, connect, send, recv
- advapi32.dll: RegCreateKeyExA, RegSetValueExA

### 4.3 Strings of Interest
- C2 domains: update.securepayment[.]com, cdn.downloadservice[.]org
- Email harvesting strings: "\\*.pst", "\\Microsoft\\Outlook\\*.ost"
- Banking related strings: "login", "password", "account", "balance"
- Anti-analysis strings: "VirtualBox", "VMware", "Sandboxie"

### 4.4 Code Analysis
- Heavily obfuscated code with junk instructions
- String encryption using custom XOR algorithm
- API resolution via hash lookup to evade import table analysis
- Multiple anti-debugging checks identified

## 5. Dynamic Analysis Findings

### 5.1 Process Activity
- Creates child process: svchost.exe (injected code)
- Injects code into explorer.exe
- Terminates security-related processes

### 5.2 File System Activity
- Drops DLL to %TEMP%\\svc32.dll
- Creates decoy PDF document in %TEMP%\\invoice.pdf
- Searches for and copies .pst and .ost files

### 5.3 Registry Modifications
- Creates autorun key: HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run
- Modifies security settings: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System
- Creates custom registry keys for configuration storage

### 5.4 Persistence Mechanisms
- Registry autorun key
- Scheduled task: "System Service Helper"
- WMI event subscription
- COM hijacking

## 6. Network Analysis

### 6.1 Command and Control Communication
- Protocol: HTTPS (TLS 1.2)
- C2 Servers:
  - 192.168.1[.]100:443 (update.securepayment[.]com)
  - 192.168.1[.]101:443 (cdn.downloadservice[.]org)
- Beacon interval: 300 seconds
- Data exfiltration observed: POST requests with encrypted payloads

### 6.2 Network Indicators
- DNS queries for C2 domains
- TLS certificate with organization "Secure Services Ltd"
- User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

## 7. Functionality Assessment

The malware appears to be a banking trojan with the following capabilities:
- Credential theft from browsers and email clients
- Information stealing (documents, cryptocurrency wallets)
- Self-propagation via email and network shares
- Remote access capabilities
- Keylogging and screen capture
- Anti-analysis techniques to evade detection

## 8. Indicators of Compromise (IOCs)

### 8.1 File Indicators
- MD5: 3a45b7e11e5a9e115f8ab5482f9cd9a1
- SHA-256: 8a9f52654f154de3bc5b5b6e9f5b53281634e42f32915b19179a4b3b9c967b3a
- File: %TEMP%\\svc32.dll
- Registry: HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemService

### 8.2 Network Indicators
- Domains: update.securepayment[.]com, cdn.downloadservice[.]org
- IP Addresses: 192.168.1[.]100, 192.168.1[.]101
- URL Patterns: /gate.php?id=, /config/update.php?version=
- TLS Certificate: CN=Secure Services Ltd

## 9. Detection and Mitigation

### 9.1 Detection
- YARA rule provided in Appendix A
- SNORT rules for network detection in Appendix B
- Sigma rules for log detection in Appendix C

### 9.2 Mitigation Recommendations
- Block identified C2 domains and IP addresses
- Implement application whitelisting
- Keep systems and security software updated
- Disable macros in Office documents
- Implement email filtering for common malware attachments
- User awareness training for phishing detection

## 10. Attribution

Based on TTPs and code similarities, this sample appears to be associated with the Emotet banking trojan family, currently operated by the threat actor tracked as TA542 (MUMMY SPIDER). The campaign targeting appears to be focused on financial institutions in North America and Europe.

## 11. Appendices

### Appendix A: YARA Rule
\`\`\`
rule Emotet_Banking_Trojan_June2023 {
    meta:
        description = "Detects Emotet Banking Trojan variant from June 2023"
        author = "Security Analyst"
        date = "2023-06-15"
        hash = "8a9f52654f154de3bc5b5b6e9f5b53281634e42f32915b19179a4b3b9c967b3a"
    strings:
        $s1 = "update.securepayment" wide ascii
        $s2 = "cdn.downloadservice" wide ascii
        $code1 = { 83 EC 20 53 55 56 57 8B 7C 24 34 85 FF 74 }
        $code2 = { 8B 45 FC 8D 55 F4 6A 00 52 89 45 F0 FF 15 }
    condition:
        uint16(0) == 0x5A4D and
        filesize < 300KB and
        (all of ($s*) or all of ($code*))
}
\`\`\`

### Appendix B: Network Traffic Logs
[Detailed network capture logs and analysis]

### Appendix C: Screenshots
[Screenshots of malware execution and behavior]`,
    },
  ],
  tools: [
    {
      name: "Ghidra",
      description: "Open-source software reverse engineering tool developed by the NSA for analyzing compiled code.",
      website: "https://ghidra-sre.org/",
      commands: [
        "# Launch Ghidra",
        "ghidraRun",
        "",
        "# Analyze a binary (from command line)",
        "analyzeHeadless /path/to/project ProjectName -import /path/to/binary -postScript AnalysisScript.java",
        "",
        "# Export results",
        "ghidra_export.py /path/to/project ProjectName BinaryName -format xml -output results.xml",
      ],
    },
    {
      name: "Cuckoo Sandbox",
      description: "Open-source automated malware analysis system for dynamic analysis in an isolated environment.",
      website: "https://cuckoosandbox.org/",
      commands: [
        "# Start Cuckoo",
        "cuckoo",
        "",
        "# Submit a file for analysis",
        "cuckoo submit /path/to/malware.exe",
        "",
        "# Submit a file with specific options",
        "cuckoo submit --timeout 300 --package exe --machine win10x64 /path/to/malware.exe",
        "",
        "# Generate a report",
        "cuckoo report <task_id> --format json",
      ],
    },
    {
      name: "Volatility",
      description:
        "Advanced memory forensics framework for extracting digital artifacts from volatile memory (RAM) samples.",
      website: "https://www.volatilityfoundation.org/",
      commands: [
        "# List available profiles",
        "volatility -f memory.dmp imageinfo",
        "",
        "# List running processes",
        "volatility -f memory.dmp --profile=Win10x64_19041 pslist",
        "",
        "# Display network connections",
        "volatility -f memory.dmp --profile=Win10x64_19041 netscan",
        "",
        "# Extract injected code",
        "volatility -f memory.dmp --profile=Win10x64_19041 malfind -D /output/dir",
      ],
    },
    {
      name: "FLOSS (FireEye Labs Obfuscated String Solver)",
      description: "Tool for automatically extracting obfuscated strings from malware.",
      website: "https://github.com/mandiant/flare-floss",
      commands: [
        "# Extract strings from a binary",
        "floss malware.exe",
        "",
        "# Output to file",
        "floss malware.exe > strings.txt",
        "",
        "# Verbose output with all features",
        "floss -v -n 10 -f --no-static-strings malware.exe",
      ],
    },
    {
      name: "REMnux",
      description: "Linux toolkit for reverse-engineering and analyzing malicious software.",
      website: "https://remnux.org/",
      commands: [
        "# REMnux is a Linux distribution with pre-installed tools",
        "# No specific commands to run the toolkit itself",
        "",
        "# Example of using a tool within REMnux",
        "pescanner malware.exe",
        "",
        "# Extract embedded files",
        "foremost -i malware.exe -o extracted_files",
      ],
    },
  ],
}

